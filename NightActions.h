#include "Actions.h"  // Parent

class NightActions : public Actions {
	public:
		std::list<int> noOfArrivingCustomers;
		
		void beginNightPhase(GameStats& gameStats){
		
			// Adds number of cooks remaining to number of pizza
			gameStats.addPizza(manageCooks(&gameStats.noOfCooks, &gameStats.noOfPizos));
			
			// Computes customers that will be arriving and feeds the eligible customers. Adds pizos earned afterwards.
			
			float profits = handleCustomers(gameStats.currentDay, gameStats.pizzaPrice, &gameStats.noOfPizzas, &gameStats.noOfCustomers);
			
			cout << "************** ENDING NIGHT PHASE **************" << std::endl;
			changeTextColorToGreen();
			cout << "Profits: " << profits << std::endl;
			changeTextColorToWhite();
			cout << "Pizos in Inventory before adding: " << gameStats.noOfPizos << std::endl;
			gameStats.increasePizosByAmount(profits);
			system("pause");
			
		}
	
		// Naming convention does not adhere to coding standards.
		// Returns pizzas that was generated by number of cooks
		int manageCooks(int* nCooks, float* fPizo){
			payCooks(nCooks, fPizo);
			return cookPizza(nCooks);
		}
		
		void payCooks(int* nCooks, float* fPizo){
			cout << "**************START PAYING COOKS**************" << std::endl;
			
			cout << "Number of cooks employed: " << *nCooks <<std::endl;
			cout << "Number of Pizos owned: " << *fPizo <<std::endl;
			
			for(int x = 0; x < *nCooks; x++){
				index = x;
				
				if(canAffordEmployeeWage(fPizo, x+1))
				{
					deductEmployeeSalaryFromCurrentPizos(fPizo);
					cout << "Paying employee: " << x+1 << " -> wage: " << x+1 << " *fpizo amount left: " << *fPizo <<std::endl;
				} else {
					
					changeTextColorToRed();
					cout << std::endl << "Pizos not enough to pay total employee wage! Some employees will leave" << std::endl;
					cout << "Employees that left the restaurant: " << *nCooks - x << std::endl;
					changeTextColorToWhite();
					
					computeCooksThatWillRemain(nCooks);
					break;
				}
			}
			
			changeTextColorToLightBlue();
			cout << std::endl << "Employees left after payout: " << *nCooks << std::endl;
			changeTextColorToWhite();
			
			cout << "Number of Pizos owned after payment of employees: " << *fPizo <<std::endl;
			cout << "**************END PAYING COOKS**************" << std::endl << std::endl;
			cout << std::endl;
			system("pause");
		}
		
		int cookPizza(int* nCooks){
			cout << "**************START COOKING PIZZA**************" << std::endl;
			cout << "NO OF COOKS: " << *nCooks << std::endl;
			changeTextColorToLightBlue();
			cout << "PIZZA GENERATED BY COOKS: " << *nCooks << std::endl;
			changeTextColorToWhite();
			cout << "**************END COOKING PIZZA**************" << std::endl << std::endl;
			cout << std::endl;
			system("pause");
			return *nCooks;
		}
		
		// Naming convention does not adhere to coding standards.
		float handleCustomers(int nDay, float fPrice, int* nPizza, int* nCustomers){
			
			// set variables to local scope variables to remove in functions calls
			currentDay = nDay;
			pizzaPrice = fPrice;
			
			noOfArrivingCustomers = customerArrive(nCustomers);
			return feedCustomers(nPizza, nCustomers);
		}

		std::list<int> customerArrive(int* nCustomers){
			cout << "**************START CUSTOMER ARRIVE**************" << std::endl;
			cout << "Number of customers attracted: " << *nCustomers <<std::endl;
			
			std::list<int> customersArriving;  
			std::list<int> customersNotArriving;  
			
			for(int x = 1; x <= *nCustomers; x++){
				if(willCustomerArrive(x)){
					customersArriving.push_back(x);
				} else {
					customersNotArriving.push_back(x);
				}
			}
		
			cout << "Day Today: " << currentDay << std::endl << std::endl;
			// Dev debug tools
			
			changeTextColorToLightBlue();
			cout << "Customers Arriving Today" <<std::endl;
			for(int x = 0; x < customersArriving.size(); x++){
				cout << "Customer: " << getElement(customersArriving, x) << std::endl;
			}
			changeTextColorToWhite();
			
			changeTextColorToRed();
			cout <<std::endl << "Customers Not Arriving Today" <<std::endl;
			for(int x = 0; x < customersNotArriving.size(); x++){
				cout << "Customer: " << getElement(customersNotArriving, x) << std::endl;
			}
			changeTextColorToWhite();
			
			cout << "**************END CUSTOMER ARRIVE**************" << std::endl << std::endl;
			cout << std::endl;
			system("pause");
			return customersArriving;
		}
		
		float feedCustomers(int* nPizza, int* nCustomers){
			cout << "**************START FEEDING CUSTOMERS**************" << std::endl;
			cout << "Total pizza count before customers arrive: " << *nPizza <<std::endl;
			
			float profits = 0.0f;
			cout << "Profits started at: " << profits <<std::endl <<std::endl;
			
			for(int x = 0; x < noOfArrivingCustomers.size(); x++){
				// set to x to index to avoid passing to function
				index = x;
				
				if(pizzaInventoryStillHasStock(nPizza)){
					handleFeedingCustomer(nPizza, &profits);
				} else {
					handleCustomerLeaving(nCustomers);
					break;
				}
			}
			cout << "Total profits at: " << profits <<std::endl;
			cout << "**************END FEEDING CUSTOMERS**************" << std::endl << std::endl;
			return profits;
		}
		
	private:
		
		int currentDay;
		int pizzaPrice;
		int index;
		
		void handleFeedingCustomer(int* nPizza, float* profits){
			*nPizza -= 1;
			changeTextColorToLightBlue();
			cout << "Feeding customer: " << getElement(noOfArrivingCustomers, index) << std::endl;
			cout << "Pizza remaining: " << *nPizza << std::endl;
			*profits += pizzaPrice;
			
			cout << "Customers remaining: " << noOfArrivingCustomers.size() - (index+1) << std::endl;
			changeTextColorToGreen();
			cout << "Profits now at: " << *profits << std::endl << std::endl;
			changeTextColorToWhite();
		}
		
		void handleCustomerLeaving(int* nCustomers){
			changeTextColorToRed();
			cout << "No more pizzas. Customers are leaving in mass!" <<std::endl;
			cout << "Customers from " << getElement(noOfArrivingCustomers, index) << " to " << *nCustomers << std::endl;
			changeTextColorToLightBlue();
			cout << "Customers that will remain: " << getElement(noOfArrivingCustomers, index) - 1 << std::endl << std::endl;
			changeTextColorToWhite();
			
			*nCustomers = getElement(noOfArrivingCustomers, index) - 1;
		}
		
		// get implementation
		int getElement(list<int> _list, int _i){
		    list<int>::iterator it = _list.begin();
		    for(int i=0; i<_i; i++){
		        ++it;
		    }
		    return *it;
		}
		
		void deductEmployeeSalaryFromCurrentPizos(float* fPizo){
			*fPizo = *fPizo - (index+1);
		}
		
		void computeCooksThatWillRemain(int* nCooks){
			*nCooks -= (*nCooks - index);
		}
		
		bool canAffordEmployeeWage(float* fPizo, int amountDue){
			return (*fPizo >= amountDue);
		}
		
		bool willCustomerArrive(int locIndex){
			return (currentDay%locIndex == 0);
		}
};
